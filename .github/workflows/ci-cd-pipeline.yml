name: CI/CD Pipeline

on:
    push:
        branches:
            - master

jobs:
    e2e-tests:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Read Node.js version from .nvmrc
              run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Build desktop app
              run: npm run build --workspace=apps/desktop

            - name: Setup test database
              run: |
                sudo /etc/init.d/postgresql start
                sudo -u postgres psql -c "CREATE DATABASE tms_db_test;"
                sudo -u postgres psql -c "CREATE USER tester WITH PASSWORD 'testpassword';"
                sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE tms_db_test TO tester;"

            - name: Create .env.test file
              run: |
                echo "NODE_ENV=test" > apps/backend/.env.test
                echo "PORT=3000" >> apps/backend/.env.test
                echo "DB_URL=postgresql://tester:testpassword@localhost:5432/tms_db_test" >> apps/backend/.env.test

            - name: Run E2E tests
              uses: cypress-io/github-action@v6
              with:
                start: npm run start:test:local:with-generate --workspace=apps/backend
                wait-on: 'http://localhost:3000'
              env:
                DB_URL: postgresql://tester:testpassword@localhost:5432/tms_db_test

    build-and-deploy-backend:
        needs: e2e-tests
        if: github.actor == 'Olorin4'
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Read Node.js version from .nvmrc
              run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Install dependencies
              run: npm install --legacy-peer-deps

            - name: Run backend tests
              run: npm run test --workspace=apps/backend -- --passWithNoTests

            - name: Generate production .env file
              run: |
                  echo "NODE_ENV=production" > apps/backend/.env.production
                  echo "PORT=${{ secrets.PORT }}" >> apps/backend/.env.production
                  echo "DB_URL=${{ secrets.DB_URL }}" >> apps/backend/.env.production
                  echo "DB_NAME=${{ secrets.DB_NAME }}" >> apps/backend/.env.production
                  echo "DB_HOST=${{ secrets.DB_HOST }}" >> apps/backend/.env.production
                  echo "DB_USER=${{ secrets.DB_USER }}" >> apps/backend/.env.production
                  echo "DB_PASS=${{ secrets.DB_PASS }}" >> apps/backend/.env.production
                  echo "DB_PORT=${{ secrets.DB_PORT }}" >> apps/backend/.env.production
                  echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> apps/backend/.env.production
                  echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> apps/backend/.env.production
                  echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> apps/backend/.env.production
                  echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> apps/backend/.env.production
                  echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> apps/backend/.env.production

            - name: Deploy Backend to Server
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_AWS_SERVER_KEY }}
                  SERVER_IP: ${{ secrets.SERVER_IP }}
              run: |
                  echo -e "${SSH_PRIVATE_KEY//_/\\n}" > private_key.pem
                  chmod 600 private_key.pem

                  echo "ðŸš€ Transferring backend files to the server using rsync..."
                  rsync -avz --exclude='node_modules' --exclude='.git' --exclude='.github' --exclude='logs' \
                    -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" apps/backend/ \
                    nick-kalas@$SERVER_IP:home/nick-kalas/apps/ironwing-backend

                  echo "ðŸš€ Installing dependencies, migrating DB, restarting PM2..."
                  ssh -i private_key.pem -o StrictHostKeyChecking=no nick-kalas@$SERVER_IP << 'EOF'
                    cd home/nick-kalas/apps/ironwing-backend

                    npm install --omit=dev

                    echo "ðŸš€ Running Prisma Migrations..."
                    npm run db:migrate:prod

                    npx prisma generate

                    pm2 restart ironwing-backend || pm2 start npm -- start --name ironwing-backend
                    pm2 save

                    echo "âœ… Backend deployment completed successfully."
                  EOF
